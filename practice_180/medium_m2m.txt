------------
Question #1
------------

createdb billing
psql -d billing

CREATE TABLE customers (
id SERIAL PRIMARY KEY,
name TEXT NOT NULL,
payment_token CHAR(8) UNIQUE NOT NULL 
CHECK (payment_token ~ '[A-Z]')
);

CREATE TABLE services (
id SERIAL PRIMARY KEY,
description TEXT NOT NULL,
price NUMERIC(10,2) NOT NULL CHECK (price > 0.00)
);

INSERT INTO customers (name, payment_token)
VALUES ('Pat Johnson', 'XHGOAHEQ');
INSERT INTO customers (name, payment_token)
VALUES ('Nancy Monreal', 'JKWQPJKL');
INSERT INTO customers (name, payment_token)
VALUES ('Lynn Blake', 'KLZXWEEE');
INSERT INTO customers (name, payment_token)
VALUES ('Chen Ke-Hua', 'KWETYCVX');
INSERT INTO customers (name, payment_token)
VALUES ('Scott Lakso', 'UUEAPQPS');
INSERT INTO customers (name, payment_token)
VALUES ('Jim Pornot', 'XKJEYAZA');

OR 


INSERT INTO customers (name, payment_token)
VALUES
  ('Pat Johnson', 'XHGOAHEQ'),
  ('Nancy Monreal', 'JKWQPJKL'),
  ('Lynn Blake', 'KLZXWEEE'),
  ('Chen Ke-Hua', 'KWETYCVX'),
  ('Scott Lakso', 'UUEAPQPS'),
  ('Jim Pornot', 'XKJEYAZA');




INSERT INTO services (description, price)
VALUES ('Unix Hosting', 5.95);
INSERT INTO services (description, price)
VALUES ('DNS', 4.95);
INSERT INTO services (description, price)
VALUES ('WhoIs Registration', 1.95);
INSERT INTO services (description, price)
VALUES ('High Bandwidth', 15.00);
INSERT INTO services (description, price)
VALUES ('Business Support', 250.00);
INSERT INTO services (description, price)
VALUES ('Dedicated Hosting', 50.00);
INSERT INTO services (description, price)
VALUES ('Bulk Email', 250.00);
INSERT INTO services (description, price)
VALUES ('One-to-one Training', 999.00);

CREATE TABLE customers_services (
id SERIAL PRIMARY KEY,
customer_id INTEGER REFERENCES customers(id) 
ON DELETE CASCADE,
service_id INTEGER REFERENCES services(id)  
);

INSERT INTO customers_services (customer_id, service_id)
VALUES (1, 1);
INSERT INTO customers_services (customer_id, service_id)
VALUES (1, 2);
INSERT INTO customers_services (customer_id, service_id)
VALUES (1, 3);

INSERT INTO customers_services (customer_id, service_id)
VALUES (3, 1);
INSERT INTO customers_services (customer_id, service_id)
VALUES (3, 2);
INSERT INTO customers_services (customer_id, service_id)
VALUES (3, 3);
INSERT INTO customers_services (customer_id, service_id)
VALUES (3, 4);
INSERT INTO customers_services (customer_id, service_id)
VALUES (3, 5);

INSERT INTO customers_services (customer_id, service_id)
VALUES (4, 1);
INSERT INTO customers_services (customer_id, service_id)
VALUES (4, 4);

INSERT INTO customers_services (customer_id, service_id)
VALUES (5, 1);
INSERT INTO customers_services (customer_id, service_id)
VALUES (5, 2);
INSERT INTO customers_services (customer_id, service_id)
VALUES (5, 6);

INSERT INTO customers_services (customer_id, service_id)
VALUES (6, 1);
INSERT INTO customers_services (customer_id, service_id)
VALUES (6, 6);
INSERT INTO customers_services (customer_id, service_id)
VALUES (6, 8);

------------
Question #2
------------

SELECT DISTINCT customers.name, customers.payment_token 
FROM customers 
INNER JOIN customers_services 
ON customers_services.customer_id = customers.id;

------------
Question #3
------------

SELECT customers.* FROM customers
LEFT OUTER JOIN customers_services
ON customers.id = customers_services.customer_id
WHERE customer_id IS NULL;

-------------------
Further Exploration
-------------------

SELECT customers.*, services.* 
FROM customers 
  FULL OUTER JOIN customers_services
  ON customers.id = customers_services.customer_id
  FULL OUTER JOIN services
  ON services.id = customers_services.service_id
WHERE service_id IS NULL OR customer_id IS NULL;

------------
Question #4
------------

SELECT services.description FROM customers_services
RIGHT OUTER JOIN services
ON services.id = customers_services.service_id
WHERE service_id IS NULL;

------------
Question #5
------------

SELECT name, STRING_AGG(description, ', ') AS services 
FROM customers
LEFT OUTER JOIN customers_services 
ON customers.id = customers_services.customer_id
LEFT OUTER JOIN services
ON customers_services.service_id = services.id
GROUP BY name;

-------------------
Further Exploration
-------------------

SELECT name, STRING_AGG(description, E'\n') AS services 
FROM customers
LEFT OUTER JOIN customers_services 
ON customers.id = customers_services.customer_id
LEFT OUTER JOIN services
ON customers_services.service_id = services.id
GROUP BY name
ORDER BY name;

OR

SELECT CASE customers.name 
         WHEN lag(customers.name) OVER (ORDER BY customers.name)
          THEN ' '
         ELSE customers.name
       END,
       services.description
FROM customers
  LEFT OUTER JOIN customers_services 
    ON customer_id = customers.id
  LEFT OUTER JOIN services 
    ON services.id = service_id;

------------
Question #6
------------

SELECT description, COUNT(service_id) 
FROM services
  INNER JOIN customers_services
    ON services.id = customers_services.service_id
GROUP BY description
HAVING COUNT(service_id) >= 3;

------------
Question #7
------------

SELECT SUM(price) AS gross FROM services 
  INNER JOIN customers_services
    ON customers_services.service_id = services.id

------------
Question #8
------------

INSERT INTO customers (name, payment_token)
VALUES ('John Doe', 'EYODHLCN');

INSERT INTO customers_services (customer_id, service_id)
VALUES (7, 1),
       (7, 2),
       (7, 3);

------------
Question #9
------------

SELECT SUM(services.price)
FROM customers 
  LEFT OUTER JOIN customers_services
    ON customers_services.customer_id = customers.id
  LEFT OUTER JOIN services
    ON customers_services.service_id = services.id
WHERE services.price > 100;

SELECT SUM(services.price)
FROM customers CROSS JOIN services
WHERE services.price > 100;

--------------------
Further Exploration
--------------------

Several examples I found for using CROSS JOINS where related to report writing. More specifically, the advantage of using CROSS JOINS for generating reports is you can show a default value (i.e. $0) when the value would otherwise be NULL. 

------------
Question #10
------------

DELETE FROM customers_services
WHERE service_id = 8;

DELETE FROM services
WHERE description = 'Bulk Email';

DELETE FROM customers
WHERE name = 'Chen Ke-Hua';

